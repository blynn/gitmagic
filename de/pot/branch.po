# Git Magic - A guide to using Git
# This file is distributed under the GNU GENERAL PUBLIC LICENSE Version 3.
# Benn Lynn <benlynn@gmail.com>, 2007.
# Armin Stebich <armin@lordofbikes.de>, 2010, 2011.
#
msgid ""
msgstr ""
"Project-Id-Version: Git Magic deutsch\n"
"Report-Msgid-Bugs-To: bennlynn@gmail.com\n"
"POT-Creation-Date: 2011-07-03 23:06+0300\n"
"PO-Revision-Date: 2011-07-03 23:23+0200\n"
"Last-Translator: Armin Stebich <armin@lordofbikes.de>\n"
"Language-Team: DE <gitmagic@lordofbikes.de>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: UTF-8\n"
"Plural-Forms: \n"

#. type: Plain text
#: ../en/branch.txt:2
msgid "== Branch Wizardry =="
msgstr "== 'Branch'-Magie =="

#. type: Plain text
#: ../en/branch.txt:4
msgid ""
"Instant branching and merging are the most lethal of Git's killer features."
msgstr ""
"Unverzügliches 'Branchen' und 'Mergen' sind die hervorstechenden "
"Eigenschaften von Git."

#. type: Plain text
#: ../en/branch.txt:8
#, no-wrap
msgid ""
"*Problem*: External factors inevitably necessitate context switching. A severe\n"
"bug manifests in the released version without warning. The deadline for a\n"
"certain feature is moved closer. A developer whose help you need for a key section of the project is about to leave. In all cases, you must abruptly drop what you are doing and focus on a completely different task.\n"
msgstr "*Problem*: Externe Faktoren zwingen zum Wechsel des Kontext. Ein schwerwiegender Fehler in der veröffentlichten Version tritt ohne Vorwarnung auf. Die Frist für ein bestimmtes Leistungsmerkmal rückt näher. Ein Entwickler, dessen Unterstützung für eine Schlüsselstelle im Projekt wichtig ist, verlässt das Team. In allen Fällen musst du alles stehen und liegen lassen und dich auf eine komplett andere Aufgabe konzentrieren.\n"

#. type: Plain text
#: ../en/branch.txt:10
msgid ""
"Interrupting your train of thought can be detrimental to your productivity, "
"and the more cumbersome it is to switch contexts, the greater the loss. With "
"centralized version control we must download a fresh working copy from the "
"central server. Distributed systems fare better, as we can clone the desired "
"version locally."
msgstr ""
"Den Gedankengang zu unterbrechen ist schlecht für die Produktivität und je "
"komplizierter der Kontextwechsel ist, desto größer ist der Verlust. Mit "
"zentraler Versionsverwaltung müssen wir eine neue Arbeitskopie vom Server "
"herunterladen. Bei verteilen Systemen ist das viel besser, da wir die "
"benötigt Version lokal 'clonen' können."

#. type: Plain text
#: ../en/branch.txt:12
msgid ""
"But cloning still entails copying the whole working directory as well as the "
"entire history up to the given point. Even though Git reduces the cost of "
"this with file sharing and hard links, the project files themselves must be "
"recreated in their entirety in the new working directory."
msgstr ""
"Doch das 'Clonen' bringt das Kopieren des gesamten Arbeitsverzeichnis wie "
"auch die ganze Geschichte bis zum angegebenen Punkt mit sich. Auch wenn Git "
"die Kosten durch Dateifreigaben und Verknüpfungen reduziert, müssen doch die "
"gesamten  Projektdateien im neuen Arbeitsverzeichnis erstellt werden."

#. type: Plain text
#: ../en/branch.txt:14
#, no-wrap
msgid "*Solution*: Git has a better tool for these situations that is much faster and more space-efficient than cloning: *git branch*.\n"
msgstr "*Lösung*: Git hat ein besseres Werkzeug für diese Situationen, die wesentlich schneller und platzsparender als 'clonen' ist: *git branch*.\n"

#. type: Plain text
#: ../en/branch.txt:16
msgid ""
"With this magic word, the files in your directory suddenly shapeshift from "
"one version to another. This transformation can do more than merely go back "
"or forward in history. Your files can morph from the last release to the "
"experimental version to the current development version to your friend's "
"version and so on."
msgstr ""
"Mit diesem Zauberwort verwandeln sich die Dateien in deinem "
"Arbeitsverzeichnis plötzlich von einer Version in eine andere. Diese "
"Verwandlung kann mehr als nur in der Geschichte vor und zurück gehen. Deine "
"Dateien können sich verwandeln, vom aktuellsten Stand, zur experimentellen "
"Version, zum neusten Entwicklungsstand, zur Version deines Freundes und so "
"weiter."

#. type: Plain text
#: ../en/branch.txt:18
msgid "=== The Boss Key ==="
msgstr "=== Die Chef-Taste ==="

#. type: Plain text
#: ../en/branch.txt:20
msgid ""
"Ever played one of those games where at the push of a button (``the boss "
"key''), the screen would instantly display a spreadsheet or something? So if "
"the boss walked in the office while you were playing the game you could "
"quickly hide it away?"
msgstr ""
"Hast du schon einmal ein Spiel gespielt, wo beim Drücken einer Taste (``der "
"Chef-Taste''), der Monitor sofort ein Tabellenblatt oder etwas anderes "
"angezeigt hat? Dass, wenn der Chef ins Büro spaziert, während du das Spiel "
"spielst, du es schnell verstecken kannst?"

#. type: Plain text
#: ../en/branch.txt:22
msgid "In some directory:"
msgstr "In irgendeinem Verzeichnis:"

#. type: Plain text
#: ../en/branch.txt:27
#, no-wrap
msgid ""
" $ echo \"I'm smarter than my boss\" > myfile.txt\n"
" $ git init\n"
" $ git add .\n"
" $ git commit -m \"Initial commit\"\n"
msgstr ""
" $ echo \"Ich bin klüger als mein Chef\" > meinedatei.txt\n"
" $ git init\n"
" $ git add .\n"
" $ git commit -m \"Erster Stand\"\n"

#. type: Plain text
#: ../en/branch.txt:29
msgid ""
"We have created a Git repository that tracks one text file containing a "
"certain message. Now type:"
msgstr ""
"Wir haben ein Git 'Repository' erstellt, das eine Textdatei mit einer "
"bestimmten Nachricht enthält. Nun gib ein:"

#. type: Plain text
#: ../en/branch.txt:33
#, no-wrap
msgid ""
" $ git checkout -b boss  # nothing seems to change after this\n"
" $ echo \"My boss is smarter than me\" > myfile.txt\n"
" $ git commit -a -m \"Another commit\"\n"
msgstr ""
" $ git checkout -b chef  # scheinbar hat sich danach nichts geändert\n"
" $ echo \"Mein Chef ist klüger als ich\" > meinedatei.txt\n"
" $ git commit -a -m \"Ein anderer Stand\"\n"

#. type: Plain text
#: ../en/branch.txt:35
msgid ""
"It looks like we've just overwritten our file and committed it. But it's an "
"illusion. Type:"
msgstr ""
"Es sieht aus als hätten wir unsere Datei überschrieben und 'commitet'. Aber "
"es ist eine Illusion. Tippe:"

#. type: Plain text
#: ../en/branch.txt:37
#, no-wrap
msgid " $ git checkout master  # switch to original version of the file\n"
msgstr " $ git checkout master  # wechsle zur Originalversion der Datei\n"

#. type: Plain text
#: ../en/branch.txt:39
msgid ""
"and hey presto! The text file is restored. And if the boss decides to snoop "
"around this directory, type:"
msgstr ""
"und Simsalabim! Die Textdatei ist wiederhergestellt. Und wenn der Chef in "
"diesem Verzeichnis herumschnüffelt, tippe:"

#. type: Plain text
#: ../en/branch.txt:41
#, no-wrap
msgid " $ git checkout boss  # switch to version suitable for boss' eyes\n"
msgstr " $ git checkout chef  # wechsle zur Version die der Chef ruhig sehen kann\n"

#. type: Plain text
#: ../en/branch.txt:43
msgid ""
"You can switch between the two versions of the file as much as you like, and "
"commit to each independently."
msgstr ""
"Du kannst zwischen den beiden Versionen wechseln, so oft du willst und du "
"kannst unabhängig voneinander in jeder Version Änderungen 'commiten'"

#. type: Plain text
#: ../en/branch.txt:45
msgid "=== Dirty Work ==="
msgstr "=== Schmutzarbeit ==="

#. type: Plain text
#: ../en/branch.txt:48
msgid ""
"[[branch]] Say you're working on some feature, and for some reason, you need "
"to go back three versions and temporarily put in a few print statements to "
"see how something works. Then:"
msgstr ""
"[[branch]] Sagen wir, du arbeitest an einer Funktion und du musst, warum "
"auch immer, drei Versionen zurückgehen um ein paar print Anweisungen "
"einzufügen, damit du siehst, wie etwas funktioniert. Dann:"

#. type: Plain text
#: ../en/branch.txt:51
#, no-wrap
msgid ""
" $ git commit -a\n"
" $ git checkout HEAD~3\n"
msgstr ""
" $ git commit -a\n"
" $ git checkout HEAD~3\n"

#. type: Plain text
#: ../en/branch.txt:53
msgid ""
"Now you can add ugly temporary code all over the place. You can even commit "
"these changes. When you're done,"
msgstr ""
"Nun kannst du überall wild temporären Code hinzufügen. Du kannst diese "
"Änderungen sogar 'commiten'. Wenn du fertig bist,"

#. type: Plain text
#: ../en/branch.txt:55
#, no-wrap
msgid " $ git checkout master\n"
msgstr " $ git checkout master\n"

#. type: Plain text
#: ../en/branch.txt:57
msgid ""
"to return to your original work. Observe that any uncommitted changes are "
"carried over."
msgstr ""
"um zur ursprünglichen Arbeit zurückzukehren. Beachte, dass alle Änderungen, "
"die nicht 'commitet' sind übernommen werden."

#. type: Plain text
#: ../en/branch.txt:59
msgid "What if you wanted to save the temporary changes after all? Easy:"
msgstr ""
"Was, wenn du am Ende die temporären Änderungen sichern willst? Einfach:"

#. type: Plain text
#: ../en/branch.txt:61
#, no-wrap
msgid " $ git checkout -b dirty\n"
msgstr " $ git checkout -b schmutzig\n"

#. type: Plain text
#: ../en/branch.txt:63
msgid ""
"and commit before switching back to the master branch. Whenever you want to "
"return to the dirty changes, simply type:"
msgstr ""
"und 'commite' bevor du auf den 'Master Branch' zurückschaltest. Wann immer "
"du zu deiner Schmutzarbeit zurückkehren willst, tippe einfach:"

#. type: Plain text
#: ../en/branch.txt:65
#, no-wrap
msgid " $ git checkout dirty\n"
msgstr " $ git checkout schnmutzig\n"

#. type: Plain text
#: ../en/branch.txt:67
msgid ""
"We touched upon this command in an earlier chapter, when discussing loading "
"old states. At last we can tell the whole story: the files change to the "
"requested state, but we must leave the master branch. Any commits made from "
"now on take your files down a different road, which can be named later."
msgstr ""
"Wir sind mit dieser Anweisung schon in einem früheren Kapitel in Berührung "
"gekommen, als wir das Laden alter Stände besprochen haben. Nun können wir "
"die ganze Geschichte erzählen: Die Dateien ändern sich zu dem angeforderten "
"Stand, aber wir müssen den 'Master Branch' verlassen. Jeder 'Commit' ab "
"jetzt führt deine Dateien auf einen anderen Weg, dem wir später noch einen "
"Namen geben können."

#. type: Plain text
#: ../en/branch.txt:69
msgid ""
"In other words, after checking out an old state, Git automatically puts you "
"in a new, unnamed branch, which can be named and saved with *git checkout -"
"b*."
msgstr ""
"Mit anderen Worten, nach dem Abrufen eines alten Stands versetzt dich Git "
"automatisch in einen neuen, unbenannten 'Branch', der mit *git checkout -b* "
"benannt und gesichert werden kann."

#. type: Plain text
#: ../en/branch.txt:71
msgid "=== Quick Fixes ==="
msgstr "=== Schnelle Fehlerbehebung ==="

#. type: Plain text
#: ../en/branch.txt:73
msgid ""
"You're in the middle of something when you are told to drop everything and "
"fix a newly discovered bug in commit `1b6d...`:"
msgstr ""
"Du steckst mitten in der Arbeit, als es heißt alles fallen zu lassen um "
"einen neu entdeckten Fehler in 'Commit' `1b6d...` zu beheben:"

#. type: Plain text
#: ../en/branch.txt:76
#, no-wrap
msgid ""
" $ git commit -a\n"
" $ git checkout -b fixes 1b6d\n"
msgstr ""
" $ git commit -a\n"
" $ git checkout -b fixes 1b6d\n"

#. type: Plain text
#: ../en/branch.txt:78
msgid "Then once you've fixed the bug:"
msgstr "Dann, wenn du den Fehler behoben hast:"

#. type: Plain text
#: ../en/branch.txt:81
#, no-wrap
msgid ""
" $ git commit -a -m \"Bug fixed\"\n"
" $ git checkout master\n"
msgstr ""
" $ git commit -a -m \"Fehler behoben\"\n"
" $ git checkout master\n"

#. type: Plain text
#: ../en/branch.txt:84
msgid ""
"and resume work on your original task. You can even 'merge' in the freshly "
"baked bugfix:"
msgstr ""
"und fahre mit deiner ursprünglichen Arbeit fort. Du kannst sogar die frisch "
"gebackene Fehlerkorrektur auf Deinen aktuellen Stand übernehmen:"

#. type: Plain text
#: ../en/branch.txt:86
#, no-wrap
msgid " $ git merge fixes\n"
msgstr " $ git merge fixes\n"

#. type: Plain text
#: ../en/branch.txt:88
msgid "=== Merging ==="
msgstr "=== 'Mergen' ==="

#. type: Plain text
#: ../en/branch.txt:92
msgid ""
"With some version control systems, creating branches is easy but merging "
"them back together is tough. With Git, merging is so trivial that you might "
"be unaware of it happening."
msgstr ""
"Mit einigen Versionsverwaltungssystemen ist das Erstellen eines 'Branch' "
"einfach, aber das Zusammenfügen ('Mergen') ist schwierig. Mit Git ist "
"'Mergen' so einfach, dass du gar nicht merkst, wenn es passiert."

#. type: Plain text
#: ../en/branch.txt:98
msgid ""
"We actually encountered merging long ago. The *pull* command in fact "
"'fetches' commits and then merges them into your current branch. If you have "
"no local changes, then the merge is a 'fast forward', a degenerate case akin "
"to fetching the latest version in a centralized version control system. But "
"if you do have local changes, Git will automatically merge, and report any "
"conflicts."
msgstr ""
"Tatsächlich sind wir dem 'Mergen' schon lange begegnet. Die *pull* Anweisung "
"holt ('fetch') eigentlich die 'Commits' und verschmilzt ('merged') diese "
"dann mit dem aktuellen 'Branch'. Wenn du keine lokalen Änderungen hast, dann "
"ist 'merge' eine 'schnelle Weiterleitung', ein Ausnahmefall, ähnlich dem "
"Abrufen der letzten Version eines zentralen Versionsverwaltungssystems. Wenn "
"du aber Änderungen hast, wird Git diese automatisch 'mergen' und dir "
"Konflikte melden."

#. type: Plain text
#: ../en/branch.txt:103
msgid ""
"Ordinarily, a commit has exactly one 'parent commit', namely, the previous "
"commit. Merging branches together produces a commit with at least two "
"parents.  This begs the question: what commit does `HEAD~10` really refer "
"to? A commit could have multiple parents, so which one do we follow?"
msgstr ""
"Normalerweise hat ein 'Commit' genau einen Eltern-'Commit', nämlich den "
"vorhergehenden 'Commit'. Das 'Mergen' mehrerer 'Branches' erzeugt einen "
"'Commit' mit mindestens zwei Eltern. Das wirft die Frage auf: Welchen "
"'Commit' referenziert `HEAD~10` tatsächlich? Ein 'Commit' kann mehrere "
"Eltern haben, welchem folgen wir also?"

#. type: Plain text
#: ../en/branch.txt:108
msgid ""
"It turns out this notation chooses the first parent every time. This is "
"desirable because the current branch becomes the first parent during a "
"merge; frequently you're only concerned with the changes you made in the "
"current branch, as opposed to changes merged in from other branches."
msgstr ""
"Es stellt sich heraus, dass diese Notation immer den ersten Elternteil "
"wählt. Dies ist erstrebenswert, denn der aktuelle 'Branch' wird zum ersten "
"Elternteil während eines 'Merge'; häufig bist du nur von Änderungen "
"betroffen, die du im aktuellen 'Branch' gemacht hast, als von den Änderungen "
"die von anderen 'Branches' eingebracht wurden."

#. type: Plain text
#: ../en/branch.txt:111
msgid ""
"You can refer to a specific parent with a caret. For example, to show the "
"logs from the second parent:"
msgstr ""
"Du kannst einen bestimmten Elternteil mit einem Caret-Zeichen referenzieren. "
"Um zum Beispiel die Logs vom zweiten Elternteil anzuzeigen:"

#. type: Plain text
#: ../en/branch.txt:113
#, no-wrap
msgid " $ git log HEAD^2\n"
msgstr " $ git log HEAD^2\n"

#. type: Plain text
#: ../en/branch.txt:116
msgid ""
"You may omit the number for the first parent. For example, to show the "
"differences with the first parent:"
msgstr ""
"Du kannst die Nummer für den ersten Elternteil weglassen. Um zum Beispiel "
"die Unterschiede zum ersten Elternteil anzuzeigen:"

#. type: Plain text
#: ../en/branch.txt:118
#, no-wrap
msgid " $ git diff HEAD^\n"
msgstr " $ git diff HEAD^\n"

#. type: Plain text
#: ../en/branch.txt:120
msgid "You can combine this notation with other types. For example:"
msgstr "Du kannst diese Notation mit anderen Typen kombinieren. Zum Beispiel:"

#. type: Plain text
#: ../en/branch.txt:122
#, no-wrap
msgid " $ git checkout 1b6d^^2~10 -b ancient\n"
msgstr " $ git checkout 1b6d^^2~10 -b uralt\n"

#. type: Plain text
#: ../en/branch.txt:125
msgid ""
"starts a new branch ``ancient'' representing the state 10 commits back from "
"the second parent of the first parent of the commit starting with 1b6d."
msgstr ""
"beginnt einen neuen 'Branch' ``uralt'', welcher den Stand 10 'Commits' "
"zurück vom zweiten Elternteil des ersten Elternteil des 'Commits', dessen "
"Hashwert mit 1b6d beginnt."

#. type: Plain text
#: ../en/branch.txt:127
msgid "=== Uninterrupted Workflow ==="
msgstr "=== Kontinuierlicher Arbeitsfluss ==="

#. type: Plain text
#: ../en/branch.txt:129
msgid ""
"Often in hardware projects, the second step of a plan must await the "
"completion of the first step. A car undergoing repairs might sit idly in a "
"garage until a particular part arrives from the factory. A prototype might "
"wait for a chip to be fabricated before construction can continue."
msgstr ""
"In Herstellungsprozessen muss der zweiter Schritt eines Plans oft auf die "
"Fertigstellung des ersten Schritt warten. Ein Auto, das repariert werden "
"soll, steht unbenutzt in der Garage bis ein Ersatzteil geliefert wird. Ein "
"Prototyp muss warten, bis ein Baustein fabriziert wurde, bevor die "
"Konstruktion fortgesetzt werden kann."

#. type: Plain text
#: ../en/branch.txt:134
msgid ""
"Software projects can be similar. The second part of a new feature may have "
"to wait until the first part has been released and tested. Some projects "
"require your code to be reviewed before accepting it, so you might wait "
"until the first part is approved before starting the second part."
msgstr ""
"Bei Softwareprojekten kann das ähnlich sein. Der zweite Teil eines "
"Leistungsmerkmals muss warten, bis der erste Teil veröffentlicht und "
"getestet wurde. Einige Projekte erfordern, dass dein Code überprüft werden "
"muss bevor er akzeptiert wird, du musst also warten, bis der erste Teil "
"geprüft wurde, bevor du mit dem zweiten Teil anfangen kannst."

#. type: Plain text
#: ../en/branch.txt:139
msgid ""
"Thanks to painless branching and merging, we can bend the rules and work on "
"Part II before Part I is officially ready. Suppose you have committed Part I "
"and sent it for review. Let's say you're in the `master` branch. Then branch "
"off:"
msgstr ""
"Dank des schmerzlosen 'Branchen' und 'Mergen' können wir die Regeln beugen "
"und am Teil II arbeiten, bevor Teil I offiziell freigegeben wurde. "
"Angenommen du hast Teil I 'commitet' und zur Prüfung eingereicht. Sagen wir "
"du bist im `master` 'Branch'. Dann 'branche' zu Teil II:"

#. type: Plain text
#: ../en/branch.txt:141
#, no-wrap
msgid " $ git checkout -b part2\n"
msgstr " $ git checkout -b teil2\n"

#. type: Plain text
#: ../en/branch.txt:145
msgid ""
"Next, work on Part II, committing your changes along the way. To err is "
"human, and often you'll want to go back and fix something in Part I.  If "
"you're lucky, or very good, you can skip these lines."
msgstr ""
"Du arbeitest also an Teil II und 'commitest' deine Änderungen regelmäßig. "
"Irren ist menschlich und so kann es vorkommen, dass du zurück zu Teil I "
"willst um einen Fehler zu beheben. Wenn du Glück hast oder sehr gut bist, "
"kannst du die nächsten Zeilen überspringen."

#. type: Plain text
#: ../en/branch.txt:151
#, no-wrap
msgid ""
" $ git checkout master  # Go back to Part I.\n"
" $ fix_problem\n"
" $ git commit -a        # Commit the fixes.\n"
" $ git checkout part2   # Go back to Part II.\n"
" $ git merge master     # Merge in those fixes.\n"
msgstr ""
" $ git checkout master  # Gehe zurück zu Teil I.\n"
" $ fix_problem\n"
" $ git commit -a        # 'Commite' die Lösung.\n"
" $ git checkout teil2   # Gehe zurück zu Teil II.\n"
" $ git merge master     # 'Merge' die Lösung.\n"

#. type: Plain text
#: ../en/branch.txt:153
msgid "Eventually, Part I is approved:"
msgstr "Schließlich, Teil I ist zugelassen:"

#. type: Plain text
#: ../en/branch.txt:158
#, no-wrap
msgid ""
" $ git checkout master  # Go back to Part I.\n"
" $ submit files         # Release to the world!\n"
" $ git merge part2      # Merge in Part II.\n"
" $ git branch -d part2  # Delete \"part2\" branch.\n"
msgstr ""
" $ git checkout master  # Gehe zurück zu Teil I.\n"
" $ submit files         # Veröffentliche deine Dateien!\n"
" $ git merge teil2      # 'Merge' in Teil II.\n"
" $ git branch -d teil2  # Lösche den Branch \"teil2\"\n"

#. type: Plain text
#: ../en/branch.txt:160
msgid ""
"Now you're in the `master` branch again, with Part II in the working "
"directory."
msgstr ""
"Nun bist du wieder im `master` 'Branch', mit Teil II im Arbeitsverzeichnis."

#. type: Plain text
#: ../en/branch.txt:164
msgid ""
"It's easy to extend this trick for any number of parts. It's also easy to "
"branch off retroactively: suppose you belatedly realize you should have "
"created a branch 7 commits ago. Then type:"
msgstr ""
"Es ist einfach, diesen Trick auf eine beliebige Anzahl von Teilen zu "
"erweitern. Es ist genauso einfach rückwirkend zu 'branchen': angenommen, du "
"merkst zu spät, dass vor sieben 'Commits' ein 'Branch' erforderlich gewesen "
"wäre. Dann tippe:"

#. type: Plain text
#: ../en/branch.txt:167
#, no-wrap
msgid ""
" $ git branch -m master part2  # Rename \"master\" branch to \"part2\".\n"
" $ git branch master HEAD~7    # Create new \"master\", 7 commits upstream.\n"
msgstr ""
" $ git branch -m master teil2  # Umbenennen des 'Branch' \"master\" zu \"teil2\".\n"
" $ git branch master HEAD~7    # Erstelle neuen \"master\", 7 Commits voraus\n"

#. type: Plain text
#: ../en/branch.txt:172
msgid ""
"The `master` branch now contains just Part I, and the `part2` branch "
"contains the rest. We are in the latter branch; we created `master` without "
"switching to it, because we want to continue work on `part2`. This is "
"unusual. Until now, we've been switching to branches immediately after "
"creation, as in:"
msgstr ""
"Der `master` Branch enthält nun Teil I, und der `teil2` Branch enthält den "
"Rest. Wir befinden uns in letzterem Branch; wir haben `master` erzeugt ohne "
"dorthin zu wechseln, denn wir wollen im `teil2` weiterarbeiten. Das ist "
"unüblich. Bisher haben wir unmittelbar nach dem Erstellen in einen 'Branch' "
"gewechselt, wie in:"

#. type: Plain text
#: ../en/branch.txt:174
#, no-wrap
msgid " $ git checkout HEAD~7 -b master  # Create a branch, and switch to it.\n"
msgstr " $ git checkout HEAD~7 -b master  # erzeuge einen Branch, und wechsle zu ihm.\n"

#. type: Plain text
#: ../en/branch.txt:176
msgid "=== Reorganizing a Medley ==="
msgstr "=== Mischmasch Reorganisieren ==="

#. type: Plain text
#: ../en/branch.txt:178
msgid ""
"Perhaps you like to work on all aspects of a project in the same branch. You "
"want to keep works-in-progress to yourself and want others to see your "
"commits only when they have been neatly organized. Start a couple of "
"branches:"
msgstr ""
"Vielleicht magst du es, alle Aspekte eines Projekts im selben 'Branch' "
"abzuarbeiten. Du willst deine laufenden Arbeiten für dich behalten und "
"andere sollen deine 'Commits' nur sehen, wenn du sie hübsch organisiert "
"hast. Beginne ein paar 'Branches':"

#. type: Plain text
#: ../en/branch.txt:181
#, no-wrap
msgid ""
"  $ git branch sanitized    # Create a branch for sanitized commits.\n"
"  $ git checkout -b medley  # Create and switch to a branch to work in.\n"
msgstr ""
"  $ git branch sauber           # Erzeuge einen Branch für gesäuberte Commits.\n"
"  $ git checkout -b mischmasch  # Erzeuge und wechsle in den Branch zum Arbeiten.\n"

#. type: Plain text
#: ../en/branch.txt:183
msgid ""
"Next, work on anything: fix bugs, add features, add temporary code, and so "
"forth, committing often along the way. Then:"
msgstr ""
"Fahre fort alles zu bearbeiten: Behebe Fehler, füge Funktionen hinzu, "
"erstelle temporären Code und so weiter und 'commite' deine Änderungen oft. "
"Dann:"

#. type: Plain text
#: ../en/branch.txt:186
#, no-wrap
msgid ""
"  $ git checkout sanitized\n"
"  $ git cherry-pick medley^^\n"
msgstr ""
"  $ git checkout bereinigt\n"
"  $ git cherry-pick mischmasch^^\n"

#. type: Plain text
#: ../en/branch.txt:188
msgid ""
"applies the grandparent of the head commit of the ``medley'' branch to the "
"``sanitized'' branch. With appropriate cherry-picks you can construct a "
"branch that contains only permanent code, and has related commits grouped "
"together."
msgstr ""
"wendet den Urahn des obersten 'Commit' des ``mischmasch'' 'Branch' auf den "
"``bereinigt'' 'Branch' an. Durch das Herauspicken der Rosinen kannst du "
"einen 'Branch' konstruieren, der nur endgültigen Code enthält und "
"zusammengehörige 'Commits' gruppiert hat."

#. type: Plain text
#: ../en/branch.txt:190
msgid "=== Managing Branches ==="
msgstr "=== 'Branches' verwalten ==="

#. type: Plain text
#: ../en/branch.txt:192
msgid "List all branches by typing:"
msgstr "Ein Liste aller 'Branches' bekommst du mit:"

#. type: Plain text
#: ../en/branch.txt:194
#, no-wrap
msgid " $ git branch\n"
msgstr " $ git branch\n"

#. type: Plain text
#: ../en/branch.txt:197
msgid ""
"By default, you start in a branch named ``master''. Some advocate leaving "
"the ``master'' branch untouched and creating new branches for your own edits."
msgstr ""
"Standardmäßig beginnst du in einem 'Branch' namens ``master''. Einige "
"plädieren dafür, den ``master'' 'Branch' unangetastet zu lassen und für "
"seine Arbeit einen neuen 'Branch' anzulegen."

#. type: Plain text
#: ../en/branch.txt:200
msgid ""
"The *-d* and *-m* options allow you to delete and move (rename) branches.  "
"See *git help branch*."
msgstr ""
"Die *-d* und *-m* Optionen erlauben dir 'Branches' zu löschen und zu "
"verschieben (umzubenennen). Siehe *git help branch*."

#. type: Plain text
#: ../en/branch.txt:205
msgid ""
"The ``master'' branch is a useful custom. Others may assume that your "
"repository has a branch with this name, and that it contains the official "
"version of your project. Although you can rename or obliterate the "
"``master'' branch, you might as well respect this convention."
msgstr ""
"Der ``master'' 'Branch' ist ein nützlicher Brauch. Andere können davon "
"ausgehen, dass dein 'Repository' einen 'Branch' mit diesem Namen hat und "
"dass er die offizielle Version enthält. Auch wenn du den ``master'' 'Branch' "
"umbenennen oder auslöschen könntest, kannst du diese Konvention aber auch "
"respektieren."

#. type: Plain text
#: ../en/branch.txt:207
msgid "=== Temporary Branches ==="
msgstr "=== Temporäre 'Branches' ==="

#. type: Plain text
#: ../en/branch.txt:212
msgid ""
"After a while you may realize you are creating short-lived branches "
"frequently for similar reasons: every other branch merely serves to save the "
"current state so you can briefly hop back to an older state to fix a high-"
"priority bug or something."
msgstr ""
"Nach einer Weile wirst du feststellen, dass du regelmäßig kurzlebige "
"'Branches' erzeugst, meist aus dem gleichen Grund: jeder neue 'Branch' dient "
"lediglich dazu, den aktuellen Stand zu sichern, damit du kurz zu einem alten "
"Stand zurück kannst um eine vorrangige Fehlerbehebung zu machen oder "
"irgendetwas anderes."

#. type: Plain text
#: ../en/branch.txt:217
msgid ""
"It's analogous to changing the TV channel temporarily to see what else is "
"on.  But instead of pushing a couple of buttons, you have to create, check "
"out, merge, and delete temporary branches. Luckily, Git has a shortcut that "
"is as convenient as a TV remote control:"
msgstr ""
"Es ist vergleichbar mit dem kurzzeitigen Umschalten des Fernsehkanals um zu "
"sehen was auf dem anderen Kanal los ist. Doch anstelle ein paar Knöpfe zu "
"drücken, machst du 'create', 'check out', 'merge' und 'delete' von "
"temporären 'Branches'. Glücklicherweise hat Git eine Abkürzung dafür, die "
"genauso komfortabel ist wie eine Fernbedienung:"

#. type: Plain text
#: ../en/branch.txt:219
#, no-wrap
msgid " $ git stash\n"
msgstr " $ git stash\n"

#. type: Plain text
#: ../en/branch.txt:224
msgid ""
"This saves the current state in a temporary location (a 'stash') and "
"restores the previous state. Your working directory appears exactly as it "
"was before you started editing, and you can fix bugs, pull in upstream "
"changes, and so on. When you want to go back to the stashed state, type:"
msgstr ""
"Das sichert den aktuellen Stand an einem temporären Ort ('stash'=Versteck) "
"und stellt den vorherigen Stand wieder her. Dein Arbeitsverzeichnis "
"erscheint wieder exakt in dem Zustand wie es war, bevor du anfingst zu "
"editieren. Nun kannst du Fehler beheben, Änderungen vom zentralen "
"'Repository' holen ('pull') und so weiter. Wenn du wieder zurück zu deinen "
"Änderungen willst, tippe:"

#. type: Plain text
#: ../en/branch.txt:226
#, no-wrap
msgid " $ git stash apply  # You may need to resolve some conflicts.\n"
msgstr " $ git stash apply  # Es kann sein, dass du Konflikte auflösen musst.\n"

#. type: Plain text
#: ../en/branch.txt:229
msgid ""
"You can have multiple stashes, and manipulate them in various ways. See *git "
"help stash*. As you may have guessed, Git maintains branches behind the "
"scenes to perform this magic trick."
msgstr ""
"Du kannst mehrere 'stashes' haben und diese unterschiedlich handhaben. Siehe "
"*git help stash*. Wie du dir vielleicht schon gedacht hast, verwendet Git "
"'Branches' im Hintergrund um diesen Zaubertrick durchzuführen."

#. type: Plain text
#: ../en/branch.txt:231
msgid "=== Work How You Want ==="
msgstr "=== Arbeite wie du willst ==="

#. type: Plain text
#: ../en/branch.txt:235
msgid ""
"You might wonder if branches are worth the bother. After all, clones are "
"almost as fast, and you can switch between them with *cd* instead of "
"esoteric Git commands."
msgstr ""
"Du magst dich fragen, ob 'Branches' diesen Aufwand Wert sind. Immerhin sind "
"'Clone' fast genauso schnell und du kannst mit *cd* anstelle von "
"esoterischen Git Befehlen zwischen ihnen wechseln."

#. type: Plain text
#: ../en/branch.txt:241
msgid ""
"Consider web browsers. Why support multiple tabs as well as multiple "
"windows? Because allowing both accommodates a wide variety of styles. Some "
"users like to keep only one browser window open, and use tabs for multiple "
"webpages. Others might insist on the other extreme: multiple windows with no "
"tabs anywhere.  Others still prefer something in between."
msgstr ""
"Betrachten wir Webbrowser. Warum mehrere Tabs unterstützen und mehrere "
"Fenster? Weil beides zu erlauben eine Vielzahl an Stilen unterstützt. Einige "
"Anwender möchten nur ein Browserfenster geöffnet haben und benutzen Tabs für "
"unterschiedliche Webseiten. Andere bestehen auf dem anderen Extrem: mehrere "
"Fenster, ganz ohne Tabs. Wieder andere bevorzugen irgendetwas dazwischen."

#. type: Plain text
#: ../en/branch.txt:245
msgid ""
"Branching is like tabs for your working directory, and cloning is like "
"opening a new browser window. These operations are fast and local, so why "
"not experiment to find the combination that best suits you? Git lets you "
"work exactly how you want."
msgstr ""
"'Branchen' ist wie Tabs für dein Arbeitsverzeichnis und 'Clonen' ist wie das "
"Öffnen eines neuen Browserfenster. Diese Operationen sind schnell und lokal, "
"also warum nicht damit experimentieren um die beste Kombination für sich "
"selbst zu finden? Git lässt dich genauso arbeiten, wie du es willst."

#~ msgid "You can even 'merge' in the bugfix you just made, either by typing:"
#~ msgstr ""
#~ "Du kannst die Fehlerbehebung, die du gerade gemacht hast, auch 'mergen'. "
#~ "Entweder durch:"

#~ msgid "or:"
#~ msgstr "oder:"

#~ msgid " $ git pull\n"
#~ msgstr " $ git pull\n"

#~ msgid "since you have already pushed the bugfix to the main repository."
#~ msgstr ""
#~ "da du die Fehlerbehebung schon ins zentrale 'Repository' ge'pushed' hast."

#~ msgid ""
#~ "The `master` branch now contains just Part I, and the `part2` branch "
#~ "contains the rest."
#~ msgstr ""
#~ "Der `master` 'Branch' enthält nun nur den Teil I und der `teil2` 'Branch' "
#~ "enthält den Rest."

#~ msgid ""
#~ "  $ git checkout -b sanitized\n"
#~ "  $ git checkout -b medley\n"
#~ msgstr ""
#~ "  $ git checkout -b bereinigt\n"
#~ "  $ git checkout -b mischmasch\n"
